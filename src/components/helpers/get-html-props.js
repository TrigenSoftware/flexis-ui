
const reactHtmlProps = [
	'allowFullScreen',
	'autoFocus',
	'async',
	'autoPlay',
	'capture',
	'checked',
	'cols',
	'contentEditable',
	'controls',
	'default',
	'defer',
	'disabled',
	'download',
	'draggable',
	'formNoValidate',
	'hidden',
	'loop',
	'multiple',
	'muted',
	'noValidate',
	'open',
	'playsInline',
	'readOnly',
	'required',
	'reversed',
	'rows',
	'rowSpan',
	'scoped',
	'seamless',
	'selected',
	'size',
	'start',
	'span',
	'spellCheck',
	'style',
	'tabIndex',
	'itemScope',
	'acceptCharset',
	'className',
	'htmlFor',
	'httpEquiv',
	'value',
	'onCopy',
	'onCut',
	'onPaste',
	'onCompositionEnd',
	'onCompositionStart',
	'onCompositionUpdate',
	'onKeyDown',
	'onKeyPress',
	'onKeyUp',
	'onFocus',
	'onBlur',
	'onChange',
	'onInput',
	'onInvalid',
	'onSubmit',
	'onClick',
	'onContextMenu',
	'onDoubleClick',
	'onDrag',
	'onDragEnd',
	'onDragEnter',
	'onDragExit',
	'onDragLeave',
	'onDragOver',
	'onDragStart',
	'onDrop',
	'onMouseDown',
	'onMouseEnter',
	'onMouseLeave',
	'onMouseMove',
	'onMouseOut',
	'onMouseOver',
	'onMouseUp',
	'onSelect',
	'onTouchCancel',
	'onTouchEnd',
	'onTouchMove',
	'onTouchStart',
	'onScroll',
	'onWheel',
	'onAbort',
	'onCanPlay',
	'onCanPlayThrough',
	'onDurationChange',
	'onEmptied',
	'onEncrypted',
	'onEnded',
	'onError',
	'onLoadedData',
	'onLoadedMetadata',
	'onLoadStart',
	'onPause',
	'onPlay',
	'onPlaying',
	'onProgress',
	'onRateChange',
	'onSeeked',
	'onSeeking',
	'onStalled',
	'onSuspend',
	'onTimeUpdate',
	'onVolumeChange',
	'onWaiting',
	'onLoad',
	'onError',
	'onAnimationStart',
	'onAnimationEnd',
	'onAnimationIteration',
	'onTransitionEnd',
	'onToggle'
];

const dataAttribute = /^data-/;

export default function getHtmlProps(inputProps) {

	const htmlProps = {};

	reactHtmlProps.forEach((reactHtmlProp) => {

		if (inputProps.hasOwnProperty(reactHtmlProp)
			|| dataAttribute.test(reactHtmlProp)
		) {
			htmlProps[reactHtmlProp] = inputProps[reactHtmlProp];
		}
	});

	return htmlProps;
}
